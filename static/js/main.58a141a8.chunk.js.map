{"version":3,"sources":["helpers/TrieNode.ts","helpers/Trie.ts","helpers/useAutoFill.tsx","components/List.tsx","dictionary/index.ts","components/SearchPage.tsx","App.tsx","index.tsx"],"names":["TrieNode","val","children","ended","this","Map","Trie","dictionary","isWordNode","root","length","forEach","str","words","split","insert","word","path","currNode","nodeValue","node","get","set","keys","next","value","getDownwardPath","currStr","has","useAutoFill","input","current","useRef","wordTrie","charTrie","useEffect","JSON","stringify","lastCharIsSpace","trim","lastWord","wordSearchResult","search","List","items","className","map","item","i","SearchPage","useState","setInput","Set","defaultDictionary","setDictionary","autoFillWord","reverse","onSubmit","e","preventDefault","add","onChange","target","onKeyDown","keyCode","x","type","placeholder","required","Boolean","style","marginLeft","context","document","createElement","getContext","font","getComputedStyle","body","measureText","width","measureTextWidth","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.58a141a8.chunk.js","sourcesContent":["import { ITrieNode } from '../interfaces';\n\nexport default class TrieNode implements ITrieNode {\n  val: string;\n\n  children: Map<string, TrieNode>;\n\n  ended: boolean;\n\n  constructor(val: string) {\n    this.val = val;\n    this.children = new Map();\n    this.ended = false;\n  }\n}\n","import { ITrie, ITrieNode } from '../interfaces';\nimport TrieNode from './TrieNode';\n\nexport class Trie implements ITrie {\n  isWordNode: boolean;\n\n  root: ITrieNode;\n\n  constructor(dictionary: string[], isWordNode: boolean) {\n    this.isWordNode = isWordNode;\n    this.root = new TrieNode('');\n    if (dictionary.length) {\n      dictionary.forEach(str => {\n        const words = str.split(' ');\n        if (isWordNode) {\n          this.insert(words); // node is a word, a path consists one or more words nodes\n        }\n        else {\n          words.forEach(word => this.insert(word)); // node is a char, a path consits one or more char nodes.\n        }\n      });\n    }\n  }\n\n  /* path contains one or more nodes, insert is to create a new path */\n  insert(path: string[] | string) {\n    let currNode = this.root;\n    for (const nodeValue of path) {\n      const node = currNode.children.get(nodeValue) || new TrieNode(nodeValue);\n      currNode.children.set(nodeValue, node);\n      currNode = node;\n    }\n    currNode.ended = true;\n  }\n\n  search(word: string[] | string): string {\n    let currNode: ITrieNode | undefined = this.root;\n    /* Check if children node has current value, if has, update the child to be currNode, else DNE */\n    for (const str of word) {\n      currNode = currNode.children.get(str);\n      if (!currNode) {\n        return '';\n      }\n    }\n    /* If has the word in dictionary, find downward path and return */\n    if (this.isWordNode) {\n      const next = currNode.children.keys().next().value;\n      return next;\n    }\n    /* If the node is char, then find till leaf to return complete string */\n    return this.getDownwardPath(currNode, '') || '';\n  }\n\n  getDownwardPath(root: ITrieNode | null, currStr: string): string | undefined {\n    if (!root || root.ended) {\n      return currStr;\n    }\n    for (const val of root.children.keys()) {\n      if (root.children.has(val)) {\n        const next = root.children.get(val);\n        return this.getDownwardPath(next || null, currStr + val);\n      }\n    }\n  }\n}\n\nexport default Trie;\n","import { useEffect, useRef } from 'react';\nimport Trie from './Trie';\n\ntype IUseAutoFillProps = {\n  input: string,\n  dictionary: string[],\n};\n\nconst useAutoFill = ({\n  input,\n  dictionary,\n}: IUseAutoFillProps) => {\n  const { current } = useRef({\n    wordTrie: new Trie([], true),\n    charTrie: new Trie([], false),\n  });\n\n  useEffect(() => {\n    if (dictionary && dictionary.length) {\n      current.wordTrie = new Trie(dictionary, true);\n      current.charTrie = new Trie(dictionary, false);\n    }\n  }, [JSON.stringify(dictionary)]);\n  // As dictionary is an array object, the === operator in useEffect checking will always return false as references are different\n\n  if (dictionary && dictionary.length && input && input.length) {\n    const lastCharIsSpace = input[input.length - 1] === ' ';\n    const words = input.trim().split(' ');\n    const lastWord = words[words.length - 1];\n    const wordSearchResult = words.length && words[0] && current.wordTrie.search(words);\n    return wordSearchResult ?\n      `${input[input.length - 1] === ' ' ? '' : ' '}${wordSearchResult}` : // add space if predict before space\n      (!lastCharIsSpace && lastWord && current.charTrie.search(lastWord)); // charTrie only need to search for last (current) one\n  }\n\n  return '';\n};\n\nexport default useAutoFill;\n","import './List.css';\n\ntype IListProps = {\n  items: string[],\n};\n\nconst List = ({ items }: IListProps) => (\n  <div className=\"list\">\n    <div className=\"list-header alter\">{`Dictionary: ${items.length}`}</div>\n    {\n      items.map((item, i) =>\n        <div className={i % 2 ? 'list-item alter' : 'list-item'} key={item}>\n          {item}\n        </div>,\n      )\n    }\n  </div>\n);\n\nexport default List;\n","const TEST_DICTIONARY = [\n  '逃げちゃだめだ、逃げちゃだめだ、逃げちゃだめだ…',\n  'I go to shcool by bus',\n];\n\nconst dictionary = [...TEST_DICTIONARY];\n\nexport default dictionary;\n","import React, { useState } from 'react';\nimport './SearchPage.css';\nimport useAutoFill from '../helpers/useAutoFill';\nimport List from './List';\nimport { default as defaultDictionary } from '../dictionary';\n\nconst TAB_KEY_CODE = 9;\n\nconst SearchPage = () => {\n  const [input, setInput] = useState('');\n  const [dictionary, setDictionary] = useState<Set<string>>(new Set(defaultDictionary)); // use set to ensure entries are unique\n\n  const autoFillWord = useAutoFill({\n    input,\n    dictionary: [...dictionary].reverse(), // Reverse to return recent input first\n  });\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setDictionary(new Set(dictionary).add(input.trim())); // remove possible trailing space at end\n    setInput('');\n  };\n\n  const handleKeydDown = (e: React.KeyboardEvent) => {\n    if (e.keyCode === TAB_KEY_CODE && autoFillWord) {\n      e.preventDefault();\n      setInput(x => `${x}${autoFillWord} `);\n    }\n  };\n\n  // calculate input font width, to get auto fill margin-left\n  const measureTextWidth = () => {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    if (context) {\n      context.font = getComputedStyle(document.body).font;\n      return context.measureText(input).width;\n    }\n    return 0;\n  };\n\n  return (\n    <div className=\"search-page\">\n      <h1 className=\"title\">AUTO FILL INPUT</h1>\n      <form onSubmit={onSubmit}>\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            value={input}\n            onChange={e => setInput(e.target.value)}\n            onKeyDown={handleKeydDown}\n            type=\"text\"\n            placeholder=\"Type something here...\"\n            required\n          />\n          {\n            Boolean(autoFillWord) &&\n            <span\n              className=\"auto-fill-hint\"\n              style={{\n                marginLeft: `${\n                  measureTextWidth() +\n                  (autoFillWord && autoFillWord[0] === ' ' ? 4 : 0)\n                  /* 5 is for the length of space as needed in next word prediction */\n                }px`,\n              }}\n            >\n              {autoFillWord}\n            </span>\n          }\n        </div>\n        <input className=\"submit-button\" type=\"submit\" value=\"Submit\" />\n      </form>\n      <List items={[...dictionary].reverse()} />\n    </div>\n  );\n};\n\nexport default SearchPage;\n","import SearchPage from './components/SearchPage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchPage />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}