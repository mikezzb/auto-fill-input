{"version":3,"sources":["helpers/TrieNode.js","helpers/Trie.js","helpers/useAutoFill.js","components/List.js","components/SearchPage.js","App.js","reportWebVitals.js","index.js"],"names":["TrieNode","val","this","children","Map","ended","Trie","dictionary","isWordNode","root","length","forEach","str","words","split","insert","word","path","currNode","nodeValue","node","get","set","keys","next","value","getDownwardPath","currStr","has","useAutoFill","input","current","useRef","wordTrie","charTrie","useEffect","JSON","stringify","lastCharIsSpace","trim","lastWord","wordSearchResult","search","List","items","className","map","item","i","SearchPage","useState","setInput","Set","setDictionary","autoFillWord","reverse","onSubmit","e","preventDefault","add","onChange","target","onKeyDown","keyCode","x","type","placeholder","required","Boolean","style","marginLeft","context","document","createElement","getContext","font","getComputedStyle","body","measureText","width","measureTextWidth","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1cbb804e.chunk.js","sourcesContent":["export default class TrieNode {\n  constructor(val) {\n    this.val = val;\n    this.children = new Map();\n    this.ended = false;\n  }\n}\n","import TrieNode from './TrieNode';\n\nexport class Trie {\n  constructor(dictionary, isWordNode) {\n    this.isWordNode = isWordNode;\n    this.root = new TrieNode('');\n    if (dictionary.length) {\n      dictionary.forEach(str => {\n        const words = str.split(' ');\n        if (isWordNode) {\n          this.insert(words); // node is a word, a path consists one or more words nodes\n        }\n        else {\n          words.forEach(word => this.insert(word)); // node is a char, a path consits one or more char nodes.\n        }\n      });\n    }\n  }\n\n  insert(path) { // path是一个包含一个或数个node的路径，insert用以创建一条路径\n    let currNode = this.root;\n    for (const nodeValue of path) {\n      const node = currNode.children.get(nodeValue) || new TrieNode(nodeValue);\n      currNode.children.set(nodeValue, node);\n      currNode = node;\n    }\n    currNode.ended = true;\n  }\n\n  search(word) {\n    let currNode = this.root;\n    for (const str of word) { // 逐层查看父节点下面有没有当前值，如果有就更新currNode为子节点，否则word不在树中\n      currNode = currNode.children.get(str);\n      if (!currNode) {\n        return false;\n      }\n    }\n    // 如果有word在词库中，找一条downward path（也就是自动联想的字串）然后返回\n    if (this.isWordNode) { // 如果是word的node，只需返回第一个word\n      const next = currNode.children.keys().next().value;\n      return next;\n    }\n    // 如果是charNode便要找到leaf （ended）以返回完整联想字串\n    return this.getDownwardPath(currNode, '');\n  }\n\n  getDownwardPath(root, currStr) {\n    if (root.ended) {\n      return currStr;\n    }\n    for (const val of root.children.keys()) {\n      if (root.children.has(val)) {\n        const next = root.children.get(val);\n        return this.getDownwardPath(next, currStr + val);\n      }\n    }\n  }\n}\n\nexport default Trie;\n","import { useEffect, useRef } from 'react';\nimport Trie from './Trie';\n\nconst useAutoFill = ({\n  input,\n  dictionary,\n}) => {\n  const { current } = useRef({\n    wordTrie: new Trie([], true),\n    charTrie: new Trie([], false),\n  });\n\n  useEffect(() => {\n    if (dictionary && dictionary.length) {\n      current.wordTrie = new Trie(dictionary, true);\n      current.charTrie = new Trie(dictionary, false);\n    }\n  }, [JSON.stringify(dictionary)]);\n  // As dictionary is an array object, the === operator in useEffect checking will always return false as references are different\n\n  if (dictionary && dictionary.length && input && input.length) {\n    const lastCharIsSpace = input[input.length - 1] === ' ';\n    const words = input.trim().split(' ');\n    const lastWord = words[words.length - 1];\n    const wordSearchResult = words.length && words[0] && current.wordTrie.search(words);\n    return wordSearchResult ?\n      `${input[input.length - 1] === ' ' ? '' : ' '}${wordSearchResult}` : //如果在空格前联想，需要加上词之间的空格\n      (!lastCharIsSpace && lastWord && current.charTrie.search(lastWord)); // charTrie 只需搜索最后一个词 (当前词)\n  }\n\n  return '';\n};\n\nexport default useAutoFill;\n","import React from 'react';\nimport './List.css';\n\nconst List = ({ items }) => (\n  <div className=\"list\">\n    <div className=\"list-header alter\">{`当前词库：${items.length}`}</div>\n    {\n      items.map((item, i) =>\n        <div className={i % 2 ? 'list-item alter' : 'list-item'} key={item}>\n          {item}\n        </div>\n      )\n    }\n  </div>\n);\n\nexport default List;\n","import React, { useState } from 'react';\nimport './SearchPage.css';\nimport useAutoFill from '../helpers/useAutoFill';\nimport List from './List';\n\nconst TAB_KEY_CODE = 9;\n\nconst SearchPage = () => {\n  const [input, setInput] = useState('');\n  const [dictionary, setDictionary] = useState(new Set()); // 使用set来确保array中items的独一性\n\n  const autoFillWord = useAutoFill({\n    input,\n    dictionary: [...dictionary].reverse(), // Reverse 是为了优先联想用户最近输入的词组\n  });\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setDictionary(new Set(dictionary).add(input.trim())); // remove possible trailing space at end\n    setInput('');\n  };\n\n  const handleKeydDown = e => {\n    if (e.keyCode === TAB_KEY_CODE && autoFillWord) {\n      e.preventDefault();\n      setInput(x => x + `${autoFillWord} `);\n    }\n  };\n\n  const measureTextWidth = () => { // 用以计算input中文字的width，以得出自动补全文字的margin-left数值\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    context.font = getComputedStyle(document.body).font;\n    return context.measureText(input).width;\n  };\n\n  return (\n    <div className=\"search-page\">\n      <h1 className=\"title\">AUTO FILL INPUT</h1>\n      <form onSubmit={onSubmit}>\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            value={input}\n            onChange={e => setInput(e.target.value)}\n            onKeyDown={handleKeydDown}\n            type=\"text\"\n            placeholder=\"输入文本...\"\n            required\n          />\n          {\n            Boolean(autoFillWord) &&\n            <span\n              className=\"auto-fill-hint\"\n              style={{\n                marginLeft: `${\n                  measureTextWidth() +\n                  (autoFillWord[0] === ' ' ? 4 : 0)\n                  /* 5 is for the length of space as needed in next word prediction */\n                }px`,\n              }}\n            >\n              {autoFillWord}\n            </span>\n          }\n        </div>\n        <input className=\"submit-button\" type=\"submit\" value=\"提交\" />\n      </form>\n      <List items={[...dictionary].reverse()} />\n    </div>\n  );\n};\n\nexport default SearchPage;\n","import SearchPage from './components/SearchPage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}